[build-system]
requires = ["setuptools>=62.3"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
ynca = ["py.typed"]

[tool.setuptools.packages.find]
include = ["ynca*"]


[project]
name = "ynca"
version = "5.20.0"
description = "Package to control Yamaha receivers that support the YNCA protocol."
readme = "README.md"
requires-python = ">=3.11"
authors = [
  { name = "Michel van de Wetering", email = "michel.van.de.wetering+ynca@gmail.com" },
]
license = { file = "LICENSE.txt" }
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Home Automation",
  "Topic :: Software Development :: Libraries",
]
dependencies = ["pyserial>=3.4"]

urls = { Homepage = "https://github.com/mvdwetering/ynca" }

[project.optional-dependencies]
dev = [
  "mypy==1.15.0",
  "ruff==0.9.7",
  "pytest>=7.0.0",
  "pytest-cov",
  "pytest-mock",
  "mock-serial==0.0.1",
]

[tool.coverage.report]
exclude_also = [
  # TYPE_CHECKING block is only executed while running mypy
  # Note that this does not seem to work, unclear why
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
addopts = "--cov=ynca --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]

[tool.ruff]
src = ["ynca"]

[tool.ruff.lint]
ignore = [
  "A005",   # It is just wrong
  "ANN401", # Opiniated warning on disallowing dynamically typed expressions
  # Ignoring missing docstrings. Most things should be clear and they tend to get out of date which is worse.
  "D100",   # Missing docstrings for public module
  "D101",   # Missing docstrings for public classes
  "D102",   # Missing docstrings for public methods
  "D103",   # Missing docstrings for public functions
  "D104",   # Missing docstrings in public package
  "D105",   # Missing docstrings in magic method
  "D107",   # Missing docstrings in __init__
  "D203",   # Conflicts with other rules
  "D213",   # Conflicts with other rules
  "RUF012", # Just broken
  "TID252", # Relative imports

  # Formatter conflicts
  "COM812",
  "COM819",
  "D206",
  "E501",
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]
select = ["ALL"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["ynca"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
# Ignore `T201` (print not allowed) in files that are intended to be used from CLI.
"ynca/terminal.py" = ["T201"]
# server.py started out as a quick hack and needs some work to get it right, until then disable some rules
"ynca/server.py" = [
  "ANN001",
  "C901",
  "FBT002",
  "PLR0912",
  "PLW2901",
  "SIM102",
  "SLF001",
  "T201",
]
"ynca/enums.py" = [
  "ANN206",
] # Complains about missing return type annotation for _missing_ but can't figure out what it should be
"tests/*" = [
  "S101",    # Asserts in tests is ok
  "PLR2004", # Magic values in tests is ok(-ish)
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by ruff
# duplicate-code - unavoidable
# used-before-assignment - false positives with TYPE_CHECKING structures
disable = [
  "abstract-method",
  "duplicate-code",
  "format",
  "unexpected-keyword-arg",
  "used-before-assignment",
]
