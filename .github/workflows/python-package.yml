# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    # branches: [ $default-branch ]
  pull_request:
    # branches: [ $default-branch ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - if: startsWith(github.ref, 'refs/tags/v')
      # Assume all tags starting with a v are version tags.
      name: Check if versiontag matches setup.py
      run: |
        VERSION_NUMBER="${GITHUB_REF_NAME:1}"
        echo Version $VERSION_NUMBER extracted from $GITHUB_REF_NAME
        grep "version = \"$VERSION_NUMBER\"" pyproject.toml
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        pip install . .[dev]
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Check typing with mypy
      run: |
        mypy ynca --check-untyped-defs
    - name: Test with pytest
      run: |
        pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
